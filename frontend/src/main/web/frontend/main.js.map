{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/api.service.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/toolbar/toolbar.component.css","webpack:///./src/app/toolbar/toolbar.component.html","webpack:///./src/app/toolbar/toolbar.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {Injectable, Query} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {QueryResult} from './toolbar/toolbar.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  baseUrl = 'http://localhost:4567';\n\n  constructor(\n    private http: HttpClient,\n  ) {\n  }\n\n  getDatabases() {\n    return this.http.get<String[]>(`${this.baseUrl}/databases`);\n  }\n\n  getTables(database: String) {\n    const dbQuery: Database = {database} as Database;\n    return this.http.post<String[]>(`${this.baseUrl}/tables`, dbQuery);\n  }\n\n  getVariables(database: String, table: String) {\n    const tableQuery: Table = {database, table} as Table;\n    return this.http.post<String[]>(`${this.baseUrl}/variables`, tableQuery);\n  }\n\n  query(database: String, table: String, variable: String) {\n    const variableQuery: Variable = {database, table, variable} as Variable;\n    return this.http.post<QueryResult>(`${this.baseUrl}/query`, variableQuery);\n  }\n\n}\n\nexport interface Database {\n  database: String;\n}\n\nexport interface Table {\n  database: String;\n  table: String;\n}\n\nexport interface Variable {\n  database: String;\n  table: String;\n  variable: String;\n}\n","module.exports = \"\\r\\n\"","module.exports = \"<app-toolbar></app-toolbar>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { ToolbarComponent } from './toolbar/toolbar.component';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport {MatFormFieldModule, MatSelectModule, MatCardModule, MatTableModule, MatSortModule\n} from '@angular/material';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ToolbarComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatCardModule,\n    MatTableModule,\n    MatSortModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\r\\n.example-container {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n}\\r\\n\\r\\n.example-container > * {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.mat-elevation-z8{\\r\\n  width: 100%;\\r\\n}\\r\\n\"","module.exports = \"<h1>Title</h1>\\n\\n<mat-card class=\\\"my-card\\\">\\n\\n  <mat-card-header>\\n    <mat-card-title><h3>Query parameters</h3></mat-card-title>\\n  </mat-card-header>\\n\\n  <mat-card-content>\\n    <form class=\\\"test-form\\\">\\n      <mat-form-field>\\n        <mat-select placeholder=\\\"Database\\\" id=\\\"database\\\" [(ngModel)]=\\\"selectedDatabase\\\"\\n                    (ngModelChange)=\\\"databaseChange()\\\"\\n                    name=\\\"selectedDatabase\\\">\\n          <mat-option *ngFor=\\\"let db of databases\\\" [value]=\\\"db\\\">{{db}}</mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n      <mat-form-field>\\n        <mat-select placeholder=\\\"Table\\\" id=\\\"table\\\" [(ngModel)]=\\\"selectedTable\\\" (ngModelChange)=\\\"tableChange()\\\"\\n                    name=\\\"selectedTable\\\">\\n          <mat-option *ngFor=\\\"let tab of tables\\\" [value]=\\\"tab\\\">{{tab}}</mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n      <mat-form-field>\\n        <mat-select placeholder=\\\"Variable\\\" id=\\\"variable\\\" [(ngModel)]=\\\"selectedVariable\\\" [(ngModel)]=\\\"selectedVariable\\\"\\n                    (ngModelChange)=\\\"variableChange()\\\" name=\\\"selectedVariable\\\">\\n          <mat-option *ngFor=\\\"let variable of variables\\\" [value]=\\\"variable\\\">{{variable}}</mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n    </form>\\n  </mat-card-content>\\n\\n</mat-card>\\n\\n<mat-card *ngIf=\\\"dataSource != null\\\">\\n  <mat-card-header>\\n    <mat-card-title><h3>Results</h3></mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <p *ngIf=\\\"queryResult.rows > 100\\\"> Partial result, only 100 rows on {{queryResult.rows}}.</p>\\n    <p *ngIf=\\\"queryResult.rows <= 100\\\"> Full rows are displayed.</p>\\n    <table mat-table class=\\\"mat-elevation-z8\\\"  [dataSource]=\\\"dataSource\\\" matSort>\\n      <ng-container matColumnDef=\\\"name\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Value</th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}}</td>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"count\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Count</th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.count}}</td>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"averageAge\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Average age</th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.averageAge}}</td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n  </mat-card-content>\\n</mat-card>\\n\\n\\n\\n\\n\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {ApiService} from '../api.service';\nimport {MatTableDataSource, MatSort} from '@angular/material';\n\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.css']\n})\nexport class ToolbarComponent implements OnInit {\n\n  @ViewChild(MatSort) sort: MatSort;\n\n  displayedColumns: string[] = ['name', 'count', 'averageAge'];\n\n  databases = [];\n  tables = [];\n  variables = [];\n\n  public queryParams = {\n    'database': '',\n    'table': '',\n    'variable': ''\n  };\n\n  selectedDatabase: any = null;\n  selectedTable: any = null;\n  selectedVariable: any = null;\n  queryResult: QueryResult = null;\n  dataSource = null;\n\n  constructor(private apiService: ApiService) {\n  }\n\n  ngOnInit() {\n    this.apiService.getDatabases().subscribe(data => {\n      this.databases = data;\n    });\n  }\n\n  databaseChange() {\n    this.queryParams.database = this.selectedDatabase;\n    this.queryParams.table = '';\n    this.queryParams.variable = '';\n    this.selectedTable = null;\n    this.selectedVariable = null;\n    this.variables = [];\n    this.queryResult = null;\n    this.dataSource = null;\n    this.apiService.getTables(this.queryParams.database).subscribe(data => this.tables = data);\n  }\n\n  tableChange() {\n    this.queryParams.table = this.selectedTable;\n    this.queryParams.variable = '';\n    this.selectedVariable = null;\n    this.queryResult = null;\n    this.dataSource = null;\n    this.apiService.getVariables(this.queryParams.database, this.queryParams.table).subscribe(data => this.variables = data);\n  }\n\n  variableChange() {\n    this.queryParams.variable = this.selectedVariable;\n    this.apiService.query(this.queryParams.database, this.queryParams.table, this.queryParams.variable).subscribe(data => {\n      this.queryResult = data;\n      this.dataSource = new MatTableDataSource(this.queryResult.columns);\n      this.dataSource.sort = this.sort;\n      }\n    );\n  }\n\n}\n\nexport interface QueryResult {\n  variable: String;\n  database: String;\n  columns: ColumnResult[];\n  rows: number;\n}\n\nexport interface ColumnResult {\n  name: String;\n  count: String;\n  averageAge: String;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}